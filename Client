local TS = game:GetService("TweenService")

local Minigun = script.Parent
local Crosshair = game.ReplicatedStorage.CrossHair:Clone()

local Player = game.Players.LocalPlayer
local Character = Player.Character

local IdleAnimation = Instance.new('Animation')
IdleAnimation.AnimationId = "rbxassetid://17485028538"
local Anim = Character.Humanoid.Animator:LoadAnimation(IdleAnimation)

local Mouse = Player:GetMouse()
local MouseIcon = Mouse.Icon

local RemoteEvent = Minigun.Fire

local EquippedBool = false
local moving
local MovingIntesity = 10


local function Collisions()
	for i,v in ipairs(Character:GetDescendants()) do
		if v:isA("BasePart") then
			v.CollisionGroup = "Player" -- This works by creating a collision group and calling it player and sets every part of the player to the collision group
		end
	end
end
spawn(Collisions)
Player.CharacterAdded:Connect(Collisions) -- whenever player respawns

local function WhileEquipping()
	Crosshair.Position = UDim2.new(0,Mouse.X,0,Mouse.Y) -- Sets the crosshair frame to the position of the mouse (anchor point has to be 0.5,0.5 to make it into the center of the mouse)
	local PosToLook = Vector3.new(Mouse.Hit.p.X,Character.HumanoidRootPart.CFrame.Y,Mouse.hit.p.Z) -- Gets the target by using mouse.hit.p (position of the mouse in workspace) and root part so it doesn't look at the floor / roof and so doesn't glitch out / look weird  
	Character.HumanoidRootPart.CFrame = CFrame.lookAt(Character.HumanoidRootPart.Position,PosToLook) --Makes the Target part look at target position using 2 vectors/positions one which is base position and one which should look at
end

local function Equipped()
	EquippedBool = true
	Crosshair.Parent = Player.PlayerGui.CrossHair
	Character.Humanoid.AutoRotate = false -- This is to make the character not rotate whenever it's being changed
	Mouse.Icon = "rbxassetid://17485711907" -- Sets the mouse image to invisible to make it so there isn't a mouse on top of the crosshair this works by creating an image making it transparent publishing it on roblox  and then setting the image to mouse using this line
	Character.Humanoid.WalkSpeed = 10
	Character.Humanoid.JumpPower = 30 
	Anim:Play()
	while EquippedBool do
		spawn(WhileEquipping)
		wait()
	end
end

local function UnEquipped()
	EquippedBool = false
	Character.Humanoid.AutoRotate = true
	Crosshair.Parent = game.ReplicatedStorage
	Mouse.Icon = MouseIcon
	Character.Humanoid.WalkSpeed = game.StarterPlayer.CharacterWalkSpeed -- Returns player back to original walkspeed by getting it from the starterplayer where it's being set
	Character.Humanoid.JumpPower = game.StarterPlayer.CharacterJumpPower-- Returns player back to original jump power by getting it from the starterplayer where it's being set
	Anim:Stop()
end

local TI = TweenInfo.new(0.05,Enum.EasingStyle.Sine,Enum.EasingDirection.InOut)
local DefaultSize = Crosshair.Size

local TweenIncrease = TS:Create(Crosshair,TI,{Size = UDim2.new(DefaultSize.X.Scale * MovingIntesity,0,DefaultSize.Y.Scale * MovingIntesity,0)})
local TweenDecrease = TS:Create(Crosshair,TI,{Size = UDim2.new(DefaultSize.X.Scale,0,DefaultSize.Y.Scale,0)})

local function Move(Speed) -- Whenever player's walkspeed get changed this gets fired	
	if Speed > 5 and not moving then -- Checks if player reached target speed and is already not moving that speed
		moving = true
		local SizeMutli = 1
		TweenDecrease:Cancel()
		TweenIncrease:Play()
		for i,v in ipairs(Crosshair:GetChildren()) do
			if v:IsA("Frame") then
				if not moving then
					break
				end
				v.Size = UDim2.new(game.ReplicatedStorage.CrossHair[v.Name].Size.X.Scale / MovingIntesity,0,game.ReplicatedStorage.CrossHair[v.Name].Size.Y.Scale / MovingIntesity,0) -- This makes parts of the crosshair (Frames / images) lower size to not make them cover the whole screen
			end
		end
	elseif moving and Speed <= 5 then
		moving = false
		TweenIncrease:Cancel()
		TweenDecrease:Play()
		wait(0.05)
		for i,v in ipairs(Crosshair:GetChildren()) do
			if v:IsA("Frame") then
				if moving then
					break
				end
				v.Size = UDim2.new(game.ReplicatedStorage.CrossHair[v.Name].Size.X.Scale,0,game.ReplicatedStorage.CrossHair[v.Name].Size.Y.Scale,0) -- sets every frame of the crosshair's size to the original (by getting the 1 that was not being changed in replicatedstroage) whenever player stops moving
			end
		end
	end
end

Minigun.Equipped:Connect(Equipped)
Minigun.Unequipped:Connect(UnEquipped)
Character.Humanoid.Running:Connect(Move)

local Holding

function to3d(x,y)
	local pos = game.Workspace.CurrentCamera:ScreenPointToRay(x,y)  -- Gets direction where the raycast should end at 
	local params = RaycastParams.new()
	params.FilterType = Enum.RaycastFilterType.Exclude -- This is to know if raycast should either only include those or exclude those set to exclude because we don't want player and player's minigun to be targeted
	params.CollisionGroup = "Minigun"
	params.CollisionGroup = "Player" -- This is so the raycast doesnt include the player shooting in it so it doesn't lead to him being damaged
	
	local RaycastResult = workspace:Raycast(workspace.CurrentCamera.CFrame.Position,pos.Direction * 500,params) -- Draws a line Between camera and target position using direction, returns what part it is pointing at and more
	if RaycastResult then
		return RaycastResult.Position,RaycastResult.Instance,RaycastResult.Normal,pos.Direction
	else
		return pos.Direction*500,nil,nil,pos.Direction -- If it doesn't find a part it returns target position / direction instead
	end
end

Mouse.Button1Down:Connect(function()
	Holding = true
	while true do
		task.wait()
		if Holding and EquippedBool then
			local random1 = math.random(0,Crosshair.Size.X.Scale*200*2) - (Crosshair.Size.X.Scale*200) -- uses RNG between 0, target number
			local random2 = math.random(0,Crosshair.Size.Y.Scale*200*2) - (Crosshair.Size.Y.Scale*200) -- uses RNG between 0, target number
			RemoteEvent:FireServer(to3d(Mouse.X + random1,Mouse.Y + random2)) -- Fires server with the raycast result
		else
			Minigun.StopFiring:FireServer()
			break
		end
	end
end)

Mouse.Button1Up:Connect(function()
	Holding = false
end)
